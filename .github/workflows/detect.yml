name: Build, Tag and Pre-Release

on:
  push:
    
jobs:
  detect:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Detect and Tag New Version
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        id: version
        with: 
          version-command: |
            grep  -Poi  '(?<=#define FIRMWARE_VERSION ")(\d*\.\d*\.\d*)' version/common.h
      
      - name: test condition
        if: steps.version.outputs.tag != null
        run: echo Tag was created

      - name: release
        if: steps.version.outputs.tag != null
        env: 
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create -t "${{ steps.version.outputs.tag }}" "${{ steps.version.outputs.tag }}"  --generate-notes README.md
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"  
      # - name: release
      #   if: steps.version.outputs.tag != null
      #   uses: actions/create-release@v1
      #   id: create_release
      #   with:
      #     draft: true
      #     prerelease: true
      #     release_name: ${{ steps.version.outputs.current-version }}
      #     tag_name: ${{ github.ref }}
      #     body_path: CHANGELOG.md
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      
      # - name: upload artifact
      #   if: steps.version.outputs.tag != null
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./artifact.md
      #     asset_name: artifact_${{ steps.version.outputs.current-version }}
      #     asset_content_type: text/plain